/**
 */
package MoSaRTBackEnd_AnalysisRepository.provider;

import MoSaRTBackEnd_AnalysisRepository.util.MoSaRTBackEnd_AnalysisRepositoryAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MoSaRTBackEnd_AnalysisRepositoryItemProviderAdapterFactory extends MoSaRTBackEnd_AnalysisRepositoryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MoSaRTBackEnd_AnalysisRepositoryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.AnalysisRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisRepositoryItemProvider analysisRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.AnalysisRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisRepositoryAdapter() {
		if (analysisRepositoryItemProvider == null) {
			analysisRepositoryItemProvider = new AnalysisRepositoryItemProvider(this);
		}

		return analysisRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.ContextModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextModelItemProvider contextModelItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.ContextModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextModelAdapter() {
		if (contextModelItemProvider == null) {
			contextModelItemProvider = new ContextModelItemProvider(this);
		}

		return contextModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.IdentificationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentificationRuleItemProvider identificationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.IdentificationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentificationRuleAdapter() {
		if (identificationRuleItemProvider == null) {
			identificationRuleItemProvider = new IdentificationRuleItemProvider(this);
		}

		return identificationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.Tool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolItemProvider toolItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.Tool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolAdapter() {
		if (toolItemProvider == null) {
			toolItemProvider = new ToolItemProvider(this);
		}

		return toolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.TestFamily} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestFamilyItemProvider testFamilyItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.TestFamily}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestFamilyAdapter() {
		if (testFamilyItemProvider == null) {
			testFamilyItemProvider = new TestFamilyItemProvider(this);
		}

		return testFamilyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.GeneralizationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationRelationshipItemProvider generalizationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.GeneralizationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationRelationshipAdapter() {
		if (generalizationRelationshipItemProvider == null) {
			generalizationRelationshipItemProvider = new GeneralizationRelationshipItemProvider(this);
		}

		return generalizationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.Deadline_Sustainability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Deadline_SustainabilityItemProvider deadline_SustainabilityItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.Deadline_Sustainability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeadline_SustainabilityAdapter() {
		if (deadline_SustainabilityItemProvider == null) {
			deadline_SustainabilityItemProvider = new Deadline_SustainabilityItemProvider(this);
		}

		return deadline_SustainabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.Jitter_Sustainability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Jitter_SustainabilityItemProvider jitter_SustainabilityItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.Jitter_Sustainability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJitter_SustainabilityAdapter() {
		if (jitter_SustainabilityItemProvider == null) {
			jitter_SustainabilityItemProvider = new Jitter_SustainabilityItemProvider(this);
		}

		return jitter_SustainabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.Period_Sustainability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Period_SustainabilityItemProvider period_SustainabilityItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.Period_Sustainability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeriod_SustainabilityAdapter() {
		if (period_SustainabilityItemProvider == null) {
			period_SustainabilityItemProvider = new Period_SustainabilityItemProvider(this);
		}

		return period_SustainabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.ExecutionTime_Sustainability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionTime_SustainabilityItemProvider executionTime_SustainabilityItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.ExecutionTime_Sustainability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionTime_SustainabilityAdapter() {
		if (executionTime_SustainabilityItemProvider == null) {
			executionTime_SustainabilityItemProvider = new ExecutionTime_SustainabilityItemProvider(this);
		}

		return executionTime_SustainabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.SufficientCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SufficientConditionItemProvider sufficientConditionItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.SufficientCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSufficientConditionAdapter() {
		if (sufficientConditionItemProvider == null) {
			sufficientConditionItemProvider = new SufficientConditionItemProvider(this);
		}

		return sufficientConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRTBackEnd_AnalysisRepository.NecessaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NecessaryConditionItemProvider necessaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRTBackEnd_AnalysisRepository.NecessaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNecessaryConditionAdapter() {
		if (necessaryConditionItemProvider == null) {
			necessaryConditionItemProvider = new NecessaryConditionItemProvider(this);
		}

		return necessaryConditionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (analysisRepositoryItemProvider != null) analysisRepositoryItemProvider.dispose();
		if (contextModelItemProvider != null) contextModelItemProvider.dispose();
		if (testItemProvider != null) testItemProvider.dispose();
		if (identificationRuleItemProvider != null) identificationRuleItemProvider.dispose();
		if (toolItemProvider != null) toolItemProvider.dispose();
		if (testFamilyItemProvider != null) testFamilyItemProvider.dispose();
		if (generalizationRelationshipItemProvider != null) generalizationRelationshipItemProvider.dispose();
		if (deadline_SustainabilityItemProvider != null) deadline_SustainabilityItemProvider.dispose();
		if (jitter_SustainabilityItemProvider != null) jitter_SustainabilityItemProvider.dispose();
		if (period_SustainabilityItemProvider != null) period_SustainabilityItemProvider.dispose();
		if (executionTime_SustainabilityItemProvider != null) executionTime_SustainabilityItemProvider.dispose();
		if (sufficientConditionItemProvider != null) sufficientConditionItemProvider.dispose();
		if (necessaryConditionItemProvider != null) necessaryConditionItemProvider.dispose();
	}

}
