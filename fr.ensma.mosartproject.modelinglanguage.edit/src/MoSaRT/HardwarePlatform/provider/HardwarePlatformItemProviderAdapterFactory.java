/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package MoSaRT.HardwarePlatform.provider;

import MoSaRT.HardwarePlatform.util.HardwarePlatformAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HardwarePlatformItemProviderAdapterFactory extends HardwarePlatformAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HardwarePlatformItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.SystemHardwareSide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemHardwareSideItemProvider systemHardwareSideItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.SystemHardwareSide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemHardwareSideAdapter() {
		if (systemHardwareSideItemProvider == null) {
			systemHardwareSideItemProvider = new SystemHardwareSideItemProvider(this);
		}

		return systemHardwareSideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpProcessingUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpProcessingUnitItemProvider hpProcessingUnitItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpProcessingUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpProcessingUnitAdapter() {
		if (hpProcessingUnitItemProvider == null) {
			hpProcessingUnitItemProvider = new HpProcessingUnitItemProvider(this);
		}

		return hpProcessingUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpFlowCarrier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpFlowCarrierItemProvider hpFlowCarrierItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpFlowCarrier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpFlowCarrierAdapter() {
		if (hpFlowCarrierItemProvider == null) {
			hpFlowCarrierItemProvider = new HpFlowCarrierItemProvider(this);
		}

		return hpFlowCarrierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpCommunicationRouter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpCommunicationRouterItemProvider hpCommunicationRouterItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpCommunicationRouter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpCommunicationRouterAdapter() {
		if (hpCommunicationRouterItemProvider == null) {
			hpCommunicationRouterItemProvider = new HpCommunicationRouterItemProvider(this);
		}

		return hpCommunicationRouterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpNetworkPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpNetworkPortItemProvider hpNetworkPortItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpNetworkPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpNetworkPortAdapter() {
		if (hpNetworkPortItemProvider == null) {
			hpNetworkPortItemProvider = new HpNetworkPortItemProvider(this);
		}

		return hpNetworkPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpCommunicationChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpCommunicationChannelItemProvider hpCommunicationChannelItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpCommunicationChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpCommunicationChannelAdapter() {
		if (hpCommunicationChannelItemProvider == null) {
			hpCommunicationChannelItemProvider = new HpCommunicationChannelItemProvider(this);
		}

		return hpCommunicationChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.HardwarePlatform.HpProcessorInterconnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HpProcessorInterconnectorItemProvider hpProcessorInterconnectorItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.HardwarePlatform.HpProcessorInterconnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHpProcessorInterconnectorAdapter() {
		if (hpProcessorInterconnectorItemProvider == null) {
			hpProcessorInterconnectorItemProvider = new HpProcessorInterconnectorItemProvider(this);
		}

		return hpProcessorInterconnectorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemHardwareSideItemProvider != null) systemHardwareSideItemProvider.dispose();
		if (hpProcessingUnitItemProvider != null) hpProcessingUnitItemProvider.dispose();
		if (hpFlowCarrierItemProvider != null) hpFlowCarrierItemProvider.dispose();
		if (hpCommunicationRouterItemProvider != null) hpCommunicationRouterItemProvider.dispose();
		if (hpNetworkPortItemProvider != null) hpNetworkPortItemProvider.dispose();
		if (hpCommunicationChannelItemProvider != null) hpCommunicationChannelItemProvider.dispose();
		if (hpProcessorInterconnectorItemProvider != null) hpProcessorInterconnectorItemProvider.dispose();
	}

}
