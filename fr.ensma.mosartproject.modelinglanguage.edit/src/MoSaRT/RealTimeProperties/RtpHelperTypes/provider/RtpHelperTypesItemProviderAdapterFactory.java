/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package MoSaRT.RealTimeProperties.RtpHelperTypes.provider;

import MoSaRT.RealTimeProperties.RtpHelperTypes.util.RtpHelperTypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RtpHelperTypesItemProviderAdapterFactory extends RtpHelperTypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RtpHelperTypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpDurationTypeItemProvider rtpDurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpDurationTypeAdapter() {
		if (rtpDurationTypeItemProvider == null) {
			rtpDurationTypeItemProvider = new RtpDurationTypeItemProvider(this);
		}

		return rtpDurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpInterArrivalType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpInterArrivalTypeItemProvider rtpInterArrivalTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpInterArrivalType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpInterArrivalTypeAdapter() {
		if (rtpInterArrivalTypeItemProvider == null) {
			rtpInterArrivalTypeItemProvider = new RtpInterArrivalTypeItemProvider(this);
		}

		return rtpInterArrivalTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDataRateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpDataRateTypeItemProvider rtpDataRateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDataRateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpDataRateTypeAdapter() {
		if (rtpDataRateTypeItemProvider == null) {
			rtpDataRateTypeItemProvider = new RtpDataRateTypeItemProvider(this);
		}

		return rtpDataRateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpPowerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpPowerTypeItemProvider rtpPowerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpPowerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpPowerTypeAdapter() {
		if (rtpPowerTypeItemProvider == null) {
			rtpPowerTypeItemProvider = new RtpPowerTypeItemProvider(this);
		}

		return rtpPowerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDataSizeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpDataSizeTypeItemProvider rtpDataSizeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpDataSizeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpDataSizeTypeAdapter() {
		if (rtpDataSizeTypeItemProvider == null) {
			rtpDataSizeTypeItemProvider = new RtpDataSizeTypeItemProvider(this);
		}

		return rtpDataSizeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpFrequencyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpFrequencyTypeItemProvider rtpFrequencyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpFrequencyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpFrequencyTypeAdapter() {
		if (rtpFrequencyTypeItemProvider == null) {
			rtpFrequencyTypeItemProvider = new RtpFrequencyTypeItemProvider(this);
		}

		return rtpFrequencyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeListItemProvider rtpExecutionTimeListItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeListAdapter() {
		if (rtpExecutionTimeListItemProvider == null) {
			rtpExecutionTimeListItemProvider = new RtpExecutionTimeListItemProvider(this);
		}

		return rtpExecutionTimeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeSimple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeSimpleItemProvider rtpExecutionTimeSimpleItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeSimple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeSimpleAdapter() {
		if (rtpExecutionTimeSimpleItemProvider == null) {
			rtpExecutionTimeSimpleItemProvider = new RtpExecutionTimeSimpleItemProvider(this);
		}

		return rtpExecutionTimeSimpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeMma} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeMmaItemProvider rtpExecutionTimeMmaItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeMma}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeMmaAdapter() {
		if (rtpExecutionTimeMmaItemProvider == null) {
			rtpExecutionTimeMmaItemProvider = new RtpExecutionTimeMmaItemProvider(this);
		}

		return rtpExecutionTimeMmaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeIntervalItemProvider rtpExecutionTimeIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeIntervalAdapter() {
		if (rtpExecutionTimeIntervalItemProvider == null) {
			rtpExecutionTimeIntervalItemProvider = new RtpExecutionTimeIntervalItemProvider(this);
		}

		return rtpExecutionTimeIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpTimeLinkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpTimeLinkTypeItemProvider rtpTimeLinkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpTimeLinkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpTimeLinkTypeAdapter() {
		if (rtpTimeLinkTypeItemProvider == null) {
			rtpTimeLinkTypeItemProvider = new RtpTimeLinkTypeItemProvider(this);
		}

		return rtpTimeLinkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpTimeReferenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpTimeReferenceTypeItemProvider rtpTimeReferenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpTimeReferenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpTimeReferenceTypeAdapter() {
		if (rtpTimeReferenceTypeItemProvider == null) {
			rtpTimeReferenceTypeItemProvider = new RtpTimeReferenceTypeItemProvider(this);
		}

		return rtpTimeReferenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpClockRefrenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpClockRefrenceTypeItemProvider rtpClockRefrenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpClockRefrenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpClockRefrenceTypeAdapter() {
		if (rtpClockRefrenceTypeItemProvider == null) {
			rtpClockRefrenceTypeItemProvider = new RtpClockRefrenceTypeItemProvider(this);
		}

		return rtpClockRefrenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeValueToBeCalculated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeValueToBeCalculatedItemProvider rtpExecutionTimeValueToBeCalculatedItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeValueToBeCalculated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeValueToBeCalculatedAdapter() {
		if (rtpExecutionTimeValueToBeCalculatedItemProvider == null) {
			rtpExecutionTimeValueToBeCalculatedItemProvider = new RtpExecutionTimeValueToBeCalculatedItemProvider(this);
		}

		return rtpExecutionTimeValueToBeCalculatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeCalculatedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RtpExecutionTimeCalculatedValueItemProvider rtpExecutionTimeCalculatedValueItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpHelperTypes.RtpExecutionTimeCalculatedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRtpExecutionTimeCalculatedValueAdapter() {
		if (rtpExecutionTimeCalculatedValueItemProvider == null) {
			rtpExecutionTimeCalculatedValueItemProvider = new RtpExecutionTimeCalculatedValueItemProvider(this);
		}

		return rtpExecutionTimeCalculatedValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rtpDurationTypeItemProvider != null) rtpDurationTypeItemProvider.dispose();
		if (rtpInterArrivalTypeItemProvider != null) rtpInterArrivalTypeItemProvider.dispose();
		if (rtpDataRateTypeItemProvider != null) rtpDataRateTypeItemProvider.dispose();
		if (rtpPowerTypeItemProvider != null) rtpPowerTypeItemProvider.dispose();
		if (rtpDataSizeTypeItemProvider != null) rtpDataSizeTypeItemProvider.dispose();
		if (rtpFrequencyTypeItemProvider != null) rtpFrequencyTypeItemProvider.dispose();
		if (rtpExecutionTimeListItemProvider != null) rtpExecutionTimeListItemProvider.dispose();
		if (rtpExecutionTimeSimpleItemProvider != null) rtpExecutionTimeSimpleItemProvider.dispose();
		if (rtpExecutionTimeMmaItemProvider != null) rtpExecutionTimeMmaItemProvider.dispose();
		if (rtpExecutionTimeIntervalItemProvider != null) rtpExecutionTimeIntervalItemProvider.dispose();
		if (rtpTimeLinkTypeItemProvider != null) rtpTimeLinkTypeItemProvider.dispose();
		if (rtpTimeReferenceTypeItemProvider != null) rtpTimeReferenceTypeItemProvider.dispose();
		if (rtpClockRefrenceTypeItemProvider != null) rtpClockRefrenceTypeItemProvider.dispose();
		if (rtpExecutionTimeValueToBeCalculatedItemProvider != null) rtpExecutionTimeValueToBeCalculatedItemProvider.dispose();
		if (rtpExecutionTimeCalculatedValueItemProvider != null) rtpExecutionTimeCalculatedValueItemProvider.dispose();
	}

}
