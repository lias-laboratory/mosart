/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package MoSaRT.SoftwarePlatform.SoftwareOperators.provider;

import MoSaRT.SoftwarePlatform.SoftwareOperators.util.SoftwareOperatorsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SoftwareOperatorsItemProviderAdapterFactory extends SoftwareOperatorsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoftwareOperatorsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SystemSoftwareSide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemSoftwareSideItemProvider systemSoftwareSideItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SystemSoftwareSide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemSoftwareSideAdapter() {
		if (systemSoftwareSideItemProvider == null) {
			systemSoftwareSideItemProvider = new SystemSoftwareSideItemProvider(this);
		}

		return systemSoftwareSideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoSchedulableTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoSchedulableTaskItemProvider soSchedulableTaskItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoSchedulableTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoSchedulableTaskAdapter() {
		if (soSchedulableTaskItemProvider == null) {
			soSchedulableTaskItemProvider = new SoSchedulableTaskItemProvider(this);
		}

		return soSchedulableTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoSpaceProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoSpaceProcessItemProvider soSpaceProcessItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoSpaceProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoSpaceProcessAdapter() {
		if (soSpaceProcessItemProvider == null) {
			soSpaceProcessItemProvider = new SoSpaceProcessItemProvider(this);
		}

		return soSpaceProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoMutualExclusionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoMutualExclusionResourceItemProvider soMutualExclusionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoMutualExclusionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoMutualExclusionResourceAdapter() {
		if (soMutualExclusionResourceItemProvider == null) {
			soMutualExclusionResourceItemProvider = new SoMutualExclusionResourceItemProvider(this);
		}

		return soMutualExclusionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoRemoteCommResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoRemoteCommResourceItemProvider soRemoteCommResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoRemoteCommResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoRemoteCommResourceAdapter() {
		if (soRemoteCommResourceItemProvider == null) {
			soRemoteCommResourceItemProvider = new SoRemoteCommResourceItemProvider(this);
		}

		return soRemoteCommResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoLocalCommResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoLocalCommResourceItemProvider soLocalCommResourceItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoLocalCommResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoLocalCommResourceAdapter() {
		if (soLocalCommResourceItemProvider == null) {
			soLocalCommResourceItemProvider = new SoLocalCommResourceItemProvider(this);
		}

		return soLocalCommResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoTransmittedData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoTransmittedDataItemProvider soTransmittedDataItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.SoftwarePlatform.SoftwareOperators.SoTransmittedData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoTransmittedDataAdapter() {
		if (soTransmittedDataItemProvider == null) {
			soTransmittedDataItemProvider = new SoTransmittedDataItemProvider(this);
		}

		return soTransmittedDataItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemSoftwareSideItemProvider != null) systemSoftwareSideItemProvider.dispose();
		if (soSchedulableTaskItemProvider != null) soSchedulableTaskItemProvider.dispose();
		if (soSpaceProcessItemProvider != null) soSpaceProcessItemProvider.dispose();
		if (soMutualExclusionResourceItemProvider != null) soMutualExclusionResourceItemProvider.dispose();
		if (soRemoteCommResourceItemProvider != null) soRemoteCommResourceItemProvider.dispose();
		if (soLocalCommResourceItemProvider != null) soLocalCommResourceItemProvider.dispose();
		if (soTransmittedDataItemProvider != null) soTransmittedDataItemProvider.dispose();
	}

}
