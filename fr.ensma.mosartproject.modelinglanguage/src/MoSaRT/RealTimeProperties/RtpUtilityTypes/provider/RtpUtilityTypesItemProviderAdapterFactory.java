/**
 */
package MoSaRT.RealTimeProperties.RtpUtilityTypes.provider;

import MoSaRT.RealTimeProperties.RtpUtilityTypes.util.RtpUtilityTypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RtpUtilityTypesItemProviderAdapterFactory extends RtpUtilityTypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RtpUtilityTypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerMatrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerMatrixItemProvider integerMatrixItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerMatrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerMatrixAdapter() {
		if (integerMatrixItemProvider == null) {
			integerMatrixItemProvider = new IntegerMatrixItemProvider(this);
		}

		return integerMatrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVectorItemProvider integerVectorItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVectorAdapter() {
		if (integerVectorItemProvider == null) {
			integerVectorItemProvider = new IntegerVectorItemProvider(this);
		}

		return integerVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealVectorItemProvider realVectorItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealVectorAdapter() {
		if (realVectorItemProvider == null) {
			realVectorItemProvider = new RealVectorItemProvider(this);
		}

		return realVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealMatrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealMatrixItemProvider realMatrixItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealMatrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealMatrixAdapter() {
		if (realMatrixItemProvider == null) {
			realMatrixItemProvider = new RealMatrixItemProvider(this);
		}

		return realMatrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerSetItemProvider integerSetItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerSetAdapter() {
		if (integerSetItemProvider == null) {
			integerSetItemProvider = new IntegerSetItemProvider(this);
		}

		return integerSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerListItemProvider integerListItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerListAdapter() {
		if (integerListItemProvider == null) {
			integerListItemProvider = new IntegerListItemProvider(this);
		}

		return integerListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealSetItemProvider realSetItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealSetAdapter() {
		if (realSetItemProvider == null) {
			realSetItemProvider = new RealSetItemProvider(this);
		}

		return realSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealListItemProvider realListItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealListAdapter() {
		if (realListItemProvider == null) {
			realListItemProvider = new RealListItemProvider(this);
		}

		return realListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerIntervalItemProvider integerIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.IntegerInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerIntervalAdapter() {
		if (integerIntervalItemProvider == null) {
			integerIntervalItemProvider = new IntegerIntervalItemProvider(this);
		}

		return integerIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealIntervalItemProvider realIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.RealInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealIntervalAdapter() {
		if (realIntervalItemProvider == null) {
			realIntervalItemProvider = new RealIntervalItemProvider(this);
		}

		return realIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MeasuredReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasuredRealItemProvider measuredRealItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MeasuredReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasuredRealAdapter() {
		if (measuredRealItemProvider == null) {
			measuredRealItemProvider = new MeasuredRealItemProvider(this);
		}

		return measuredRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.UnknownReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnknownRealItemProvider unknownRealItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.UnknownReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnknownRealAdapter() {
		if (unknownRealItemProvider == null) {
			unknownRealItemProvider = new UnknownRealItemProvider(this);
		}

		return unknownRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.SimpleReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleRealItemProvider simpleRealItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.SimpleReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleRealAdapter() {
		if (simpleRealItemProvider == null) {
			simpleRealItemProvider = new SimpleRealItemProvider(this);
		}

		return simpleRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MaxMinAvgReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxMinAvgRealItemProvider maxMinAvgRealItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MaxMinAvgReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxMinAvgRealAdapter() {
		if (maxMinAvgRealItemProvider == null) {
			maxMinAvgRealItemProvider = new MaxMinAvgRealItemProvider(this);
		}

		return maxMinAvgRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MeasuredInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasuredIntegerItemProvider measuredIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MeasuredInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasuredIntegerAdapter() {
		if (measuredIntegerItemProvider == null) {
			measuredIntegerItemProvider = new MeasuredIntegerItemProvider(this);
		}

		return measuredIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.UnknownInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnknownIntegerItemProvider unknownIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.UnknownInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnknownIntegerAdapter() {
		if (unknownIntegerItemProvider == null) {
			unknownIntegerItemProvider = new UnknownIntegerItemProvider(this);
		}

		return unknownIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.SimpleInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleIntegerItemProvider simpleIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.SimpleInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleIntegerAdapter() {
		if (simpleIntegerItemProvider == null) {
			simpleIntegerItemProvider = new SimpleIntegerItemProvider(this);
		}

		return simpleIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MaxMinAvgInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxMinAvgIntegerItemProvider maxMinAvgIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link MoSaRT.RealTimeProperties.RtpUtilityTypes.MaxMinAvgInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxMinAvgIntegerAdapter() {
		if (maxMinAvgIntegerItemProvider == null) {
			maxMinAvgIntegerItemProvider = new MaxMinAvgIntegerItemProvider(this);
		}

		return maxMinAvgIntegerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (integerMatrixItemProvider != null) integerMatrixItemProvider.dispose();
		if (integerVectorItemProvider != null) integerVectorItemProvider.dispose();
		if (realVectorItemProvider != null) realVectorItemProvider.dispose();
		if (realMatrixItemProvider != null) realMatrixItemProvider.dispose();
		if (integerSetItemProvider != null) integerSetItemProvider.dispose();
		if (integerListItemProvider != null) integerListItemProvider.dispose();
		if (realSetItemProvider != null) realSetItemProvider.dispose();
		if (realListItemProvider != null) realListItemProvider.dispose();
		if (integerIntervalItemProvider != null) integerIntervalItemProvider.dispose();
		if (realIntervalItemProvider != null) realIntervalItemProvider.dispose();
		if (measuredRealItemProvider != null) measuredRealItemProvider.dispose();
		if (unknownRealItemProvider != null) unknownRealItemProvider.dispose();
		if (simpleRealItemProvider != null) simpleRealItemProvider.dispose();
		if (maxMinAvgRealItemProvider != null) maxMinAvgRealItemProvider.dispose();
		if (measuredIntegerItemProvider != null) measuredIntegerItemProvider.dispose();
		if (unknownIntegerItemProvider != null) unknownIntegerItemProvider.dispose();
		if (simpleIntegerItemProvider != null) simpleIntegerItemProvider.dispose();
		if (maxMinAvgIntegerItemProvider != null) maxMinAvgIntegerItemProvider.dispose();
	}

}
